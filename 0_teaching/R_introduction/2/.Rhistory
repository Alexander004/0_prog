data <- rbind(a,b)
# Basic barplot:
ggplot(a, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity')
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
# Save at gif:
anim_save("288-animated-barplot-transition.gif")
anim <- ggplot(mtcars, aes(mpg, disp)) +
transition_states(gear, transition_length = 2, state_length = 1) +
enter_fade() +
exit_fade()
library(ggplot2)
anim <- ggplot(mtcars, aes(mpg, disp)) +
transition_states(gear, transition_length = 2, state_length = 1) +
enter_fade() +
exit_fade()
library(ggplot2)
library(gganimate)
anim <- ggplot(mtcars, aes(mpg, disp)) +
transition_states(gear, transition_length = 2, state_length = 1) +
enter_fade() +
exit_fade()
if (FALSE) {
# Renderers are specified in the `animate()` function
animate(anim, renderer = sprite_renderer())
}
install.packages("gifski")
library(ggplot2)
library(gganimate)
#
anim <- ggplot(mtcars, aes(mpg, disp)) +
transition_states(gear, transition_length = 2, state_length = 1) +
enter_fade() +
exit_fade()
if (FALSE) {
# Renderers are specified in the `animate()` function
animate(anim, renderer = sprite_renderer())
}
library(ggplot2)
library(gganimate)
#
anim <- ggplot(mtcars, aes(mpg, disp)) +
transition_states(gear, transition_length = 2, state_length = 1) +
enter_fade() +
exit_fade()
if (FALSE) {
# Renderers are specified in the `animate()` function
animate(anim, renderer = sprite_renderer())
}
library(ggplot2)
library(gganimate)
#
anim <- ggplot(mtcars, aes(mpg, disp)) +
transition_states(gear, transition_length = 2, state_length = 1) +
enter_fade() +
exit_fade()
if (FALSE) {
# Renderers are specified in the `animate()` function
animate(anim, renderer = sprite_renderer())
}
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
library(ggplot2)
makeplot <- function(){
datalist <- split(gapminder, gapminder$year)
lapply(datalist, function(data){
p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
scale_size("population", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +
scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()
print(p)
})
}
# High Definition images:
gif_file <- save_gif(makeplot(), width = 800, height = 450, res = 92)
library(gapminder)
library(ggplot2)
library(gifski)
makeplot <- function(){
datalist <- split(gapminder, gapminder$year)
lapply(datalist, function(data){
p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
scale_size("population", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +
scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()
print(p)
})
}
# High Definition images:
gif_file <- save_gif(makeplot(), width = 800, height = 450, res = 92)
utils::browseURL(gif_file)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("gganimate")
library(ggplot2)
library(gganimate)
theme_set(theme_bw())
#install.packages("gapminder")
#install.packages("png")
#install.packages("gifski")
library(gifski)
library(gapminder)
head(gapminder)
p <- ggplot(gapminder, aes(x = gdpPercap, y=lifeExp, size = pop, colour = country)) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
scale_x_log10() +
labs(x = "GDP per capita", y = "Life expectancy")
p
p + transition_time(year) +
labs(title = "Year: {frame_time}")
library(gapminder)
library(ggplot2)
makeplot <- function(){
datalist <- split(gapminder, gapminder$year)
lapply(datalist, function(data){
p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
scale_size("population", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +
scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()
print(p)
})
}
# High Definition images:
gif_file <- save_gif(makeplot(), width = 800, height = 450, res = 92)
utils::browseURL(gif_file)
p + transition_time(year) +
labs(title = "Year: {frame_time}")
anim_save("filename.gif", animation = last_animation())
save_gif("filename.gif", animation = last_animation())
knitr::opts_chunk$set(echo = TRUE)
install.packages("dslabs")
library(dslabs)
data(murders)
sort(murders$total)
#install.packages("dslabs")
library(dslabs)
data(murders)
sort(murders$total)
x <- c(31, 4, 15, 92, 65)
sort(x)
#> [1] 4 15 31 65 92
index <- order(x)
x[index]
#> [1] 4 15 31 65 92
x
#> [1] 31 4 15 92 65
order(x)
#> [1] 2 3 1 5 4
murders$state[1:6]
#> [1] "Alabama" "Alaska" "Arizona" "Arkansas" "California"
#> [6] "Colorado"
murders$abb[1:6]
#> [1] "AL" "AK" "AZ" "AR" "CA" "CO"
head(murders)
ind <- order(murders$total)
murders$abb[ind]
max(murders$total)
i_max <- which.max(murders$total)
murders$state[i_max]
x <- c(31, 4, 15, 92, 65)
rank(x)
df <- data.frame(original = c(31, 4, 15, 92, 65))
df$sort <- sort(df$original)
df$order <- order(df$original)
df$rank <- rank(df$original)
df
x <- c(1,2,3)
y <- c(10, 20, 30, 40, 50, 60, 70)
x+y
pop <- murders$population
pop <- sort(pop)
pop[1]
index_smallest_pop <- order(murders$population)[1]
index_smallest_pop
index_smallest_pop <- which.min(murders$population)
index_smallest_pop
knitr::opts_chunk$set(echo = TRUE)
library(dslabs)
data(murders)
head(murders)
pop <- murders$population
sort(pop)
pop <- murders$population
sort(pop)[1]
order(pop)
order(pop)[1]
which.min(pop)
i <- which.min(pop)
murders$state[i]
my_df$ranks <- rank(murders$population)
my_df <- data.frame(state = murders$state, abb = murders$abb)
my_df$ranks <- rank(murders$population)
my_df
ranks <- rank(murders$population)
my_df <- data.frame(state = murders$state, ranks = ranks)
my_df
ind <- order(my_df$population)
ind <- order(murders$population)
ind <- order(murders$population)
my_df <- my_df[ind, ]
my_df
murder <- murders$total
murder <- murders$total
my_df$murder_rate <- murder / murders$pop * 100000
murder <- murders$total
my_df$murder_rate <- murder / murders$pop * 100000
my_df
murder <- murders$total
my_df$murder_rate <- murders$total / murders$pop * 100000
my_df
murder <- murders$total
my_df$murder_rate <- murder / pop * 100000
my_df
murders$murder_rate <- murder / pop * 100000
murders
murders <- murders[ind, ]
murders
murder <- murders$total
my_df$murder_rate <- murder / pop * 100000
my_df
murders$murder_rate <- murder / pop * 100000
murders
knitr::opts_chunk$set(echo = TRUE)
library(dslabs)
data(murders)
head(murders)
pop <- murders$population
sort(pop)[1]
order(pop)[1]
which.min(pop)
i <- which.min(pop)
murders$state[i]
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro","San Juan", "Toronto")
city_temps <- data.frame(name = city, temperature = temp)
ranks <- rank(murders$population)
my_df <- data.frame(state = murders$state, ranks = ranks)
my_df
ind <- order(murders$population)
my_df <- my_df[ind, ]
my_df
murders <- murders[ind, ]
murders
murder <- murders$total
my_df$murder_rate <- murder / pop * 100000
my_df
murders$murder_rate <- murder / pop * 100000
murders
plot(my_df$murder_rate)
library(dslabs)
data(murders)
murders
murder <- murders$total
my_df$murder_rate <- murder / murders$population * 100000
my_df
murder <- murders$total
my_df$murder_rate <- murders$total / murders$population * 100000
my_df
plot(my_df$murder_rate)
knitr::opts_chunk$set(echo = TRUE)
library(dslabs)
data(murders)
murders
pop <- murders$population
sort(pop)[1]
order(pop)[1]
which.min(pop)
i <- which.min(pop)
murders$state[i]
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro","San Juan", "Toronto")
city_temps <- data.frame(name = city, temperature = temp)
ranks <- rank(murders$population)
my_df <- data.frame(state = murders$state, ranks = ranks)
my_df
ind <- order(murders$population)
my_df <- my_df[ind, ]
my_df
murders <- murders[ind, ]
murders
murder <- murders$total
my_df$murder_rate <- murders$total / murders$population * 100000
my_df
plot(my_df$murder_rate)
plot(my_df$murder_rate)
knitr::opts_chunk$set(echo = TRUE)
library(dslabs)
data(murders)
murders
pop <- murders$population
sort(pop)[1]
order(pop)[1]
which.min(pop)
i <- which.min(pop)
murders$state[i]
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro","San Juan", "Toronto")
city_temps <- data.frame(name = city, temperature = temp)
ranks <- rank(murders$population)
my_df <- data.frame(state = murders$state, ranks = ranks)
my_df
ind <- order(murders$population)
my_df <- my_df[ind, ]
my_df
murders <- murders[ind, ]
murders
my_df$murder_rate <- murders$total / murders$population * 100000
my_df
plot(my_df$murder_rate)
ii <- which.max(my_df$murder_rate)
my_df$state[ii]
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dslabs")
library(dslabs)
data(murders)
sort(murders$total)
View(murders)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("dslabs")
library(dslabs)
data(murders)
sort(murders$total)
head(murders)
x <- c(31, 4, 15, 92, 65)
sort(x)
index <- order(x)
x[index]
x
order(x)
murders$state[1:6]
murders$abb[1:6]
ind <- order(murders$total)
murders$abb[ind]
max(murders$total)
i_max <- which.max(murders$total)
murders$state[i_max]
x <- c(31, 4, 15, 92, 65)
rank(x)
df <- data.frame(original = c(31, 4, 15, 92, 65))
df$sort <- sort(df$original)
df$order <- order(df$original)
df$rank <- rank(df$original)
df
x <- c(1,2,3)
y <- c(10, 20, 30, 40, 50, 60, 70)
x+y
temp <- c(35, 88, 42, 84, 81, 30)
city <- c("Beijing", "Lagos", "Paris", "Rio de Janeiro","San Juan", "Toronto")
city_temps <- data.frame(name = city, temperature = temp)
ind <- order(murders$total)
murders$abb[ind]
murders$state[ind]
which.max(murders$total)
i_max <- which.max(murders$total)
murders$state[i_max]
help(sort())
help(sort)
help(sort)
sort(x, decreasing = FALSE)
a <- c(4, 6, 7, 56)
sort(a, decreasing = FALSE)
a <- c(4, 6, 7, 56)
sort(a, decreasing = TRUE-)
a <- c(4, 6, 7, 56)
sort(a, decreasing = TRUE)
which.max(murders$total)
i_max <- which.max(murders$total)
murders$state[which.max(murders$total)]
which.max(murders$total)
murders$state[which.max(murders$total)]
install.packages("igraph")
library(igraph)
adjm <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.9,0.1)), ncol=10)
g1 <- graph_from_adjacency_matrix( adjm )
adjm <- matrix(sample(0:5, 100, replace=TRUE,
prob=c(0.9,0.02,0.02,0.02,0.02,0.02)), ncol=10)
g2 <- graph_from_adjacency_matrix(adjm, weighted=TRUE)
E(g2)$weight
## various modes for weighted graphs, with some tests
nzs <- function(x) sort(x [x!=0])
adjm <- matrix(runif(100), 10)
adjm[ adjm<0.5 ] <- 0
g3 <- graph_from_adjacency_matrix((adjm + t(adjm))/2, weighted=TRUE,
mode="undirected")
g4 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="max")
all(nzs(pmax(adjm, t(adjm))[upper.tri(adjm)]) == sort(E(g4)$weight))
g5 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="min")
all(nzs(pmin(adjm, t(adjm))[upper.tri(adjm)]) == sort(E(g5)$weight))
g6 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="upper")
all(nzs(adjm[upper.tri(adjm)]) == sort(E(g6)$weight))
g7 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="lower")
all(nzs(adjm[lower.tri(adjm)]) == sort(E(g7)$weight))
g8 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="plus")
d2 <- function(x) { diag(x) <- diag(x)/2; x }
all(nzs((d2(adjm+t(adjm)))[lower.tri(adjm)]) == sort(E(g8)$weight))
g9 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="plus", diag=FALSE)
d0 <- function(x) { diag(x) <- 0 }
all(nzs((d0(adjm+t(adjm)))[lower.tri(adjm)]) == sort(E(g9)$weight))
## row/column names
rownames(adjm) <- sample(letters, nrow(adjm))
colnames(adjm) <- seq(ncol(adjm))
g10 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, add.rownames="code")
summary(g10)
View(adjm)
View(df)
View(g1)
View(g10)
adjm <- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.9,0.1)), ncol=10)
g1 <- graph_from_adjacency_matrix( adjm )
adjm <- matrix(sample(0:5, 100, replace=TRUE,
prob=c(0.9,0.02,0.02,0.02,0.02,0.02)), ncol=10)
g2 <- graph_from_adjacency_matrix(adjm, weighted=TRUE)
E(g2)$weight
## various modes for weighted graphs, with some tests
nzs <- function(x) sort(x [x!=0])
adjm <- matrix(runif(100), 10)
adjm[ adjm<0.5 ] <- 0
g3 <- graph_from_adjacency_matrix((adjm + t(adjm))/2, weighted=TRUE,
mode="undirected")
g4 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="max")
all(nzs(pmax(adjm, t(adjm))[upper.tri(adjm)]) == sort(E(g4)$weight))
g5 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="min")
all(nzs(pmin(adjm, t(adjm))[upper.tri(adjm)]) == sort(E(g5)$weight))
g6 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="upper")
all(nzs(adjm[upper.tri(adjm)]) == sort(E(g6)$weight))
g7 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="lower")
all(nzs(adjm[lower.tri(adjm)]) == sort(E(g7)$weight))
g8 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="plus")
d2 <- function(x) { diag(x) <- diag(x)/2; x }
all(nzs((d2(adjm+t(adjm)))[lower.tri(adjm)]) == sort(E(g8)$weight))
g9 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, mode="plus", diag=FALSE)
d0 <- function(x) { diag(x) <- 0 }
all(nzs((d0(adjm+t(adjm)))[lower.tri(adjm)]) == sort(E(g9)$weight))
## row/column names
rownames(adjm) <- sample(letters, nrow(adjm))
colnames(adjm) <- seq(ncol(adjm))
g10 <- graph_from_adjacency_matrix(adjm, weighted=TRUE, add.rownames="code")
summary(g10)
library(igraph)
## Attaching package: 'igraph'
## The following objects are masked from 'package:stats':
##
##     decompose, spectrum
## The following object is masked from 'package:base':
##
##     union
graph <- list(s = c("a", "b"),
a = c("s", "b", "c", "d"),
b = c("s", "a", "c", "d"),
c = c("a", "b", "d", "e", "f"),
d = c("a", "b", "c", "e", "f"),
e = c("c", "d", "f", "z"),
f = c("c", "d", "e", "z"),
z = c("e", "f"))
weights <- list(s = c(3, 5),
a = c(3, 1, 10, 11),
b = c(5, 3, 2, 3),
c = c(10, 2, 3, 7, 12),
d = c(15, 7, 2, 11, 2),
e = c(7, 11, 3, 2),
f = c(12, 2, 3, 2),
z = c(2, 2))
# create edgelist with weights
G <- data.frame(stack(graph), weights = stack(weights)[[1]])
set.seed(500)
el <- as.matrix(stack(graph))
g <- graph_from_edgelist(el)
oldpar <- par(mar = c(1, 1, 1, 1))
plot(g, edge.label = stack(weights)[[1]])
par(oldpar)
View(G)
path_length <- function(path) {
# if path is NULL return infinite length
if (is.null(path)) return(Inf)
# get all consecutive nodes
pairs <- cbind(values = path[-length(path)], ind = path[-1])
# join with G and sum over weights
sum(merge(pairs, G)[ , "weights"])
}
find_shortest_path <- function(graph, start, end, path = c()) {
# if there are no nodes linked from current node (= dead end) return NULL
if (is.null(graph[[start]])) return(NULL)
# add next node to path so far
path <- c(path, start)
# base case of recursion: if end is reached return path
if (start == end) return(path)
# initialize shortest path as NULL
shortest <- NULL
# loop through all nodes linked from the current node (given in start)
for (node in graph[[start]]) {
# proceed only if linked node is not already in path
if (!(node %in% path)) {
# recursively call function for finding shortest path with node as start and assign it to newpath
newpath <- find_shortest_path(graph, node, end, path)
# if newpath is shorter than shortest so far assign newpath to shortest
if (path_length(newpath) < path_length(shortest))
shortest <- newpath
}
}
# return shortest path
shortest
}
find_shortest_path(graph, "s", "z")
cars

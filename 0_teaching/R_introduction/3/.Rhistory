a = c("s", "b", "c", "d"),
b = c("s", "a", "c", "d"),
c = c("a", "b", "d", "e", "f"),
d = c("a", "b", "c", "e", "f"),
e = c("c", "d", "f", "z"),
f = c("c", "d", "e", "z"),
z = c("e", "f"))
weights <- list(s = c(3, 5),
a = c(3, 1, 10, 11),
b = c(5, 3, 2, 3),
c = c(10, 2, 3, 7, 12),
d = c(15, 7, 2, 11, 2),
e = c(7, 11, 3, 2),
f = c(12, 2, 3, 2),
z = c(2, 2))
# create edgelist with weights
G <- data.frame(stack(graph), weights = stack(weights)[[1]])
G
# Define the adjacency matrix for the graph
adj_mat <- matrix(c(0, 1, 0, 1, 0,
1, 0, 1, 1, 0,
0, 1, 0, 1, 1,
1, 1, 1, 0, 1,
0, 0, 1, 1, 0), nrow = 5, byrow = TRUE)
# Define the weights matrix for the graph
weights_mat <- matrix(c(0, 5, 0, 3, 0,
5, 0, 2, 1, 0,
0, 2, 0, 4, 6,
3, 1, 4, 0, 8,
0, 0, 6, 8, 0), nrow = 5, byrow = TRUE)
# Define the vertex labels for the graph
vertex_labels <- c("A", "B", "C", "D", "E")
# Set the row and column names for the matrices
rownames(adj_mat) <- vertex_labels
colnames(adj_mat) <- vertex_labels
rownames(weights_mat) <- vertex_labels
colnames(weights_mat) <- vertex_labels
# Print the adjacency matrix and the weights matrix
print(adj_mat)
print(weights_mat)
g <- make_ring(10)
shortest_paths(g, 8, 2)
E(g)$weight <- seq_len(ecount(g))
shortest_paths(g, 8, 2)
g <- make_ring(10)
shortest_paths(g, 8, 2)
E(g)$weight <- seq_len(ecount(g))
shortest_paths(g, 8, 2)
plot(g)
g <- make_ring(10)
shortest_paths(g, 8, 2)
plot(g)
V(g4)$gender <- c("male", "male", "male", "male", "female", "female", "male")
E(g4)$type <- "email" # Edge attribute, assign "email" to all edges
E(g4)$weight <- 10    # Edge weight, setting all existing edges to 10
g4[]
View(g4)
gtask <- graph( c("1", "2", "1", "3", "1", "4", "2", "3"))
plot(gtask)
gtask <- graph( c("1", "2", "1", "3", "1", "4", "2", "3"))
plot(gtask)
E(gtask)
gtask <- graph( c("1", "2", "1", "3", "1", "4", "2", "3"))
plot(gtask)
E(gtask)$weight
gtask <- graph( c("1", "2", "1", "3", "1", "4", "2", "3"))
plot(gtask)
E(gtask)$weight <- c(10, 4, 8, 2)
gtask <- graph( c("1", "2", "1", "3", "1", "4", "2", "3"))
plot(gtask)
E(gtask)$weight <- c(10, 4, 8, 2)
gtask[]
gtask <- graph( c("1", "2", "1", "3", "1", "4", "2", "3"))
plot(gtask)
E(gtask)$weight <- c(10, 4, 8, 2)
gtask[]
gtask <- graph( c("1", "2", "1", "3", "1", "4", "2", "3"))
plot(gtask)
E(gtask)$weight <- c(10, 4, 8, 2)
gtask[]
# Define the adjacency matrix for the graph
adj_mat <- matrix(c(0, 1, 0, 1, 0,
1, 0, 1, 1, 0,
0, 1, 0, 1, 1,
1, 1, 1, 0, 1,
0, 0, 1, 1, 0), nrow = 5, byrow = TRUE)
# Define the vertex labels for the graph
vertex_labels <- c("A", "B", "C", "D", "E")
# Set the row and column names for the matrices
rownames(adj_mat) <- vertex_labels
colnames(adj_mat) <- vertex_labels
# Print the adjacency matrix and the weights matrix
print(adj_mat)
gtask2 <- graph(adj_mat)
gtask2 <- graph_from_adjacency_matrix(adj_mat)
gtask2 <- graph_from_adjacency_matrix(adj_mat)
plot(gtask2)
gtask2 <- graph_from_adjacency_matrix(adj_mat, weighted = TRUE)
plot(gtask2)
# Define the adjacency matrix for the graph
adj_mat <- matrix(c(0, 1, 0, 1, 0,
1, 0, 1, 1, 0,
0, 1, 0, 1, 1,
1, 2, 1, 0, 1,
0, 0, 1, 1, 0), nrow = 5, byrow = TRUE)
# Define the vertex labels for the graph
vertex_labels <- c("A", "B", "C", "D", "E")
# Set the row and column names for the matrices
rownames(adj_mat) <- vertex_labels
colnames(adj_mat) <- vertex_labels
# Print the adjacency matrix and the weights matrix
print(adj_mat)
gtask2 <- graph_from_adjacency_matrix(adj_mat, weighted = TRUE)
plot(gtask2)
gtask2 <- graph_from_adjacency_matrix(adj_mat, weighted = TRUE)
plot(gtask2, edge.label = E(gtask2)$weight)
gtask2 <- graph_from_adjacency_matrix(adj_mat, weighted = TRUE, directed=F)
gtask2 <- graph_from_adjacency_matrix(adj_mat, weighted = TRUE, directed=FALSE)
gtask2 <- graph_from_adjacency_matrix(adj_mat, weighted = TRUE)
plot(gtask2, edge.label = E(gtask2)$weight)
gtask2 <- graph_from_adjacency_matrix(adj_mat, "undirected", weighted = TRUE)
plot(gtask2, edge.label = E(gtask2)$weight)
a<-rnorm(10000)
summary(a)
hist(a, breaks=100, main="Histogram for A",
xlab="A normal distribution")# breaks = the intervals between the columns
abline(v = 0.008839, col="red", lwd=2, lty=2)# v=value, col=color, lwd=line width, lty=type of the line
a<-rnorm(10000)
summary(a)
hist(a, breaks=100, main="Histogram for A",
xlab="A normal distribution")# breaks = the intervals between the columns
abline(v = 0.01463, col="red", lwd=2, lty=2)# v=value, col=color, lwd=line width, lty=type of the line
a<-rnorm(10000)
summary(a)
hist(a, breaks=100, main="Histogram for A",
xlab="A normal distribution")# breaks = the intervals between the columns
abline(v = mean(a), col="red", lwd=2, lty=2)# v=value, col=color, lwd=line width, lty=type of the line
a<-rnorm(10000)
summary(a)
hist(a, breaks=100, main="Histogram for A",
xlab="A normal distribution")# breaks = the intervals between the columns
abline(v = mean(a), col="red", lwd=2, lty=2)# v=value, col=color, lwd=line width, lty=type of the line
a<-rnorm(10000)
summary(a)
hist(a, breaks=100, main="Histogram for A",
xlab="A normal distribution")# breaks = the intervals between the columns
abline(v = mean(a), col="red", lwd=2, lty=2)# v=value, col=color, lwd=line width, lty=type of the line
all_shortest_paths(gtask2, "A")
library(igraph) # Load the igraph package
g1 <- graph( edges=c(1,2, 2,3, 3, 1), n=3, directed=F )
plot(g1)
g2 <- graph( edges=c(1,2, 2,3, 3, 1), n=10 )
plot(g2)
g3 <- graph( c("John", "Jim", "Jim", "Jill", "Jill", "John")) # named vertices
plot(g3)
g4 <- graph( c("John", "Jim", "Jim", "Jack", "Jim", "Jack", "John", "John"),
isolates=c("Jesse", "Janis", "Jennifer", "Justin") )
plot(g4, edge.arrow.size=.5, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8, vertex.label.dist=2, edge.curved=0.2)
plot(graph_from_literal(a---b, b---c)) # the number of dashes doesn't matter
plot(graph_from_literal(a--+b, b+--c))
plot(graph_from_literal(a+-+b, b+-+c))
plot(graph_from_literal(a:b:c---c:d:e))
gl <- graph_from_literal(a-b-c-d-e-f, a-g-h-b, h-e:f:i, j)
plot(gl)
E(g4) # The edges of the object
V(g4) # The vertices of the object
g4[]
V(g4)$name # automatically generated when we created the network.
V(g4)$gender <- c("male", "male", "male", "male", "female", "female", "male")
E(g4)$type <- "email" # Edge attribute, assign "email" to all edges
E(g4)$weight <- 10    # Edge weight, setting all existing edges to 10
g4[]
edge_attr(g4)
vertex_attr(g4)
plot(g4, edge.arrow.size=0.5, vertex.label.color="black", vertex.label.dist=2.5,
vertex.color=c( "pink", "skyblue")[1+(V(g4)$gender=="male")] )
g4s <- simplify( g4, remove.multiple = T, remove.loops = F,
edge.attr.comb=c(weight="sum", type="ignore") )
plot(g4s, vertex.label.dist=1.5)
eg <- make_empty_graph(40)
plot(eg, vertex.size=10, vertex.label=NA)
fg <- make_full_graph(40)
plot(fg, vertex.size=10, vertex.label=NA)
st <- make_star(10)
plot(st, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children = 3, mode = "undirected")
plot(tr, vertex.size=10, vertex.label=NA)
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
# DATASET 1: edgelist
nodes <- read.csv("Data/Dataset1-Media-Example-NODES.csv", header=T, as.is=T)
links <- read.csv("Data/Dataset1-Media-Example-EDGES.csv", header=T, as.is=T)
head(nodes)
head(links)
# Converting the data to an igraph object:
# The graph.data.frame function, which takes two data frames: 'd' and 'vertices'.
# 'd' describes the edges of the network - it should start with two columns
# containing the source and target node IDs for each network tie.
# 'vertices' should start with a column of node IDs.
# Any additional columns in either data frame are interpreted as attributes.
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
plot(net, edge.arrow.size=.4,vertex.label=NA)
net <- simplify(net, remove.multiple = F, remove.loops = T)
plot(net, edge.arrow.size=.4,vertex.label=NA)
as_edgelist(net, names=T)
as_adjacency_matrix(net, attr="weight")
as_data_frame(net, what="edges")
as_data_frame(net, what="vertices")
nodes2 <- read.csv("Data/Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Data/Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
links2 <- as.matrix(links2)
links2
net2 <- graph_from_incidence_matrix(links2)
plot(net2,vertex.label=NA)
g <- make_ring(10)
shortest_paths(g, 8, 2)
plot(g)
gtask <- graph( c("1", "2", "1", "3", "1", "4", "2", "3"))
plot(gtask)
E(gtask)$weight <- c(10, 4, 8, 2)
gtask[]
# Define the adjacency matrix for the graph
adj_mat <- matrix(c(0, 1, 0, 1, 0,
1, 0, 1, 1, 0,
0, 1, 0, 1, 1,
1, 2, 1, 0, 1,
0, 0, 1, 1, 0), nrow = 5, byrow = TRUE)
# Define the vertex labels for the graph
vertex_labels <- c("A", "B", "C", "D", "E")
# Set the row and column names for the matrices
rownames(adj_mat) <- vertex_labels
colnames(adj_mat) <- vertex_labels
# Print the adjacency matrix and the weights matrix
print(adj_mat)
gtask2 <- graph_from_adjacency_matrix(adj_mat, "undirected", weighted = TRUE)
plot(gtask2, edge.label = E(gtask2)$weight)
all_shortest_paths(gtask2, "A")
V(g4)$gender=="male")
(V(g4)$gender=="male")
g4s <- simplify( g4, remove.multiple = T, remove.loops = T,
edge.attr.comb=c(weight="sum", type="ignore") )
plot(g4s, vertex.label.dist=1.5)
g4s <- simplify( g4, remove.multiple = T, remove.loops = T,
edge.attr.comb=c(weight="sum", type="ignore") )
plot(g4s, vertex.label.dist=1.5)
eg <- make_empty_graph(10)
plot(eg, vertex.size=10, vertex.label=NA)
eg <- make_empty_graph(1000)
plot(eg, vertex.size=10, vertex.label=NA)
eg <- make_empty_graph(100)
plot(eg, vertex.size=10, vertex.label=NA)
fg <- make_full_graph(10)
plot(fg, vertex.size=10, vertex.label=NA)
st <- make_star(100)
plot(st, vertex.size=10, vertex.label=NA)
st <- make_star(10)
plot(st, vertex.size=10, vertex.label=NA)
tr <- make_tree(40, children = 5, mode = "undirected")
plot(tr, vertex.size=10, vertex.label=NA)
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
rn <- make_ring(40)
plot(rn, vertex.size=10, vertex.label=NA)
plot(net, edge.arrow.size=.4)
plot(net, edge.arrow.size=.4)
net <- simplify(net, remove.multiple = F, remove.loops = T)
plot(net, edge.arrow.size=.4,vertex.label=NA)
net <- simplify(net, remove.multiple = T, remove.loops = T)
plot(net, edge.arrow.size=.4,vertex.label=NA)
net <- simplify(net, remove.multiple = T, remove.loops = T)
plot(net, edge.arrow.size=.4,vertex.label=NA)
nodes2 <- read.csv("Data/Dataset2-Media-User-Example-NODES.csv", header=T, as.is=T)
links2 <- read.csv("Data/Dataset2-Media-User-Example-EDGES.csv", header=T, row.names=1)
links2 <- as.matrix(links2)
links2
View(nodes2)
gtask <- graph( c("1", "2", "1", "3", "1", "4", "2", "3"))
plot(gtask)
E(gtask)$weight <- c(10, 4, 8, 2)
gtask[]
shortest.paths(gtask, 2, 4)
gtask <- graph( c("1", "2", "1", "3", "1", "4", "2", "3"))
plot(gtask)
E(gtask)$weight <- c(10, 4, 8, 2)
gtask[]
shortest_paths(gtask, 2, 4)
gtask <- graph( c("2", "1", "1", "1", "3", "4", "2", "3"))
plot(gtask)
E(gtask)$weight <- c(10, 4, 8, 2)
gtask[]
shortest_paths(gtask, 2, 4)
gtask <- graph( c("2", "1", "3", "1", "1", "4", "2", "3"))
plot(gtask)
E(gtask)$weight <- c(10, 4, 8, 2)
gtask[]
shortest_paths(gtask, 2, 4)
gtask <- graph( c("2", "1", "3", "1", "1", "4", "2", "3"), weighted = TRUE)
gtask <- graph( c("2", "1", "3", "1", "1", "4", "2", "3"))
plot(gtask)
E(gtask)$weight <- c(10, 4, 8, 2)
gtask[]
shortest_paths(gtask, 2, 4)
?graph
gtask <- graph( c("2", "1", "3", "1", "1", "4", "2", "3"), directed = FALSE)
plot(gtask)
E(gtask)$weight <- c(10, 4, 8, 2)
gtask[]
shortest_paths(gtask, 2, 4)
?graph_from_adjacency_matrix
gtask2 <- graph_from_adjacency_matrix(adj_mat, "undirected", weighted = TRUE)
plot(gtask2, edge.label = E(gtask2)$weight)
shortest_paths(gtask2, "A", "C")
# Define the adjacency matrix for the graph
adj_mat <- matrix(c(0, 1, 0, 10, 0,
1, 0, 1, 1, 0,
0, 1, 0, 1, 1,
1, 2, 1, 0, 1,
0, 0, 1, 1, 0), nrow = 5, byrow = TRUE)
# Define the vertex labels for the graph
vertex_labels <- c("A", "B", "C", "D", "E")
# Set the row and column names for the matrices
rownames(adj_mat) <- vertex_labels
colnames(adj_mat) <- vertex_labels
# Print the adjacency matrix and the weights matrix
print(adj_mat)
gtask2 <- graph_from_adjacency_matrix(adj_mat, "undirected", weighted = TRUE)
plot(gtask2, edge.label = E(gtask2)$weight)
shortest_paths(gtask2, "A", "C")
all_shortest_paths(gtask2, "A")
?all_shortest_paths
?matrix
graph <- list(s = c("a", "b"),
a = c("s", "b", "c", "d"),
b = c("s", "a", "c", "d"),
c = c("a", "b", "d", "e", "f"),
d = c("a", "b", "c", "e", "f"),
e = c("c", "d", "f", "z"),
f = c("c", "d", "e", "z"),
z = c("e", "f"))
weights <- list(s = c(3, 5),
a = c(3, 1, 10, 11),
b = c(5, 3, 2, 3),
c = c(10, 2, 3, 7, 12),
d = c(15, 7, 2, 11, 2),
e = c(7, 11, 3, 2),
f = c(12, 2, 3, 2),
z = c(2, 2))
G <- data.frame(stack(graph), weights = stack(weights)[[1]])
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
View(G)
graph <- list(s = c("a", "b"),
a = c("s", "b", "c", "d"),
b = c("s", "a", "c", "d"),
c = c("a", "b", "d", "e", "f"),
d = c("a", "b", "c", "e", "f"),
e = c("c", "d", "f", "z"),
f = c("c", "d", "e", "z"),
z = c("e", "f"))
weights <- list(s = c(3, 5),
a = c(3, 1, 10, 11),
b = c(5, 3, 2, 3),
c = c(10, 2, 3, 7, 12),
d = c(15, 7, 2, 11, 2),
e = c(7, 11, 3, 2),
f = c(12, 2, 3, 2),
z = c(2, 2))
G <- data.frame(stack(graph), weights = stack(weights)[[1]])
aaa <- graph_from_data_frame(d=G, vertices=data.frame(c(s,a,b,c,d,e,f,z)), directed=FALSE)
graph <- list(s = c("a", "b"),
a = c("s", "b", "c", "d"),
b = c("s", "a", "c", "d"),
c = c("a", "b", "d", "e", "f"),
d = c("a", "b", "c", "e", "f"),
e = c("c", "d", "f", "z"),
f = c("c", "d", "e", "z"),
z = c("e", "f"))
weights <- list(s = c(3, 5),
a = c(3, 1, 10, 11),
b = c(5, 3, 2, 3),
c = c(10, 2, 3, 7, 12),
d = c(15, 7, 2, 11, 2),
e = c(7, 11, 3, 2),
f = c(12, 2, 3, 2),
z = c(2, 2))
G <- data.frame(stack(graph), weights = stack(weights)[[1]])
aaa <- graph_from_data_frame(d=G, vertices=data.frame(c("s",'a','b','c','d','e','f','z')), directed=FALSE)
graph <- list(s = c("a", "b"),
a = c("s", "b", "c", "d"),
b = c("s", "a", "c", "d"),
c = c("a", "b", "d", "e", "f"),
d = c("a", "b", "c", "e", "f"),
e = c("c", "d", "f", "z"),
f = c("c", "d", "e", "z"),
z = c("e", "f"))
weights <- list(s = c(3, 5),
a = c(3, 1, 10, 11),
b = c(5, 3, 2, 3),
c = c(10, 2, 3, 7, 12),
d = c(15, 7, 2, 11, 2),
e = c(7, 11, 3, 2),
f = c(12, 2, 3, 2),
z = c(2, 2))
G <- data.frame(stack(graph), weights = stack(weights)[[1]])
aaa <- graph_from_data_frame(d=G, vertices=data.frame(c("s",'a','b','c','d','e','f','z')), directed=FALSE)
plot(aaa)
?graph_from_data_frame
graph <- list(s = c("a", "b"),
a = c("s", "b", "c", "d"),
b = c("s", "a", "c", "d"),
c = c("a", "b", "d", "e", "f"),
d = c("a", "b", "c", "e", "f"),
e = c("c", "d", "f", "z"),
f = c("c", "d", "e", "z"),
z = c("e", "f"))
weights <- list(s = c(3, 5),
a = c(3, 1, 10, 11),
b = c(5, 3, 2, 3),
c = c(10, 2, 3, 7, 12),
d = c(15, 7, 2, 11, 2),
e = c(7, 11, 3, 2),
f = c(12, 2, 3, 2),
z = c(2, 2))
# Create a vector of unique nodes
nodes <- unique(unlist(graph))
# Create an empty matrix
mat <- matrix(0, ncol = length(nodes), nrow = length(nodes), dimnames = list(nodes, nodes))
# Fill in the matrix with weights
for (i in nodes) {
for (j in graph[[i]]) {
mat[i, j] <- weights[[i]][which(graph[[i]] == j)]
}
}
# Print the matrix
print(mat)
graph <- list(s = c("a", "b"),
a = c("s", "b", "c", "d"),
b = c("s", "a", "c", "d"),
c = c("a", "b", "d", "e", "f"),
d = c("a", "b", "c", "e", "f"),
e = c("c", "d", "f", "z"),
f = c("c", "d", "e", "z"),
z = c("e", "f"))
weights <- list(s = c(3, 5),
a = c(3, 1, 10, 11),
b = c(5, 3, 2, 3),
c = c(10, 2, 3, 7, 12),
d = c(15, 7, 2, 11, 2),
e = c(7, 11, 3, 2),
f = c(12, 2, 3, 2),
z = c(2, 2))
# Create a vector of unique nodes
nodes <- unique(unlist(graph))
# Create an empty matrix
mat <- matrix(0, ncol = length(nodes), nrow = length(nodes), dimnames = list(nodes, nodes))
# Fill in the matrix with weights
for (i in nodes) {
for (j in graph[[i]]) {
mat[i, j] <- weights[[i]][which(graph[[i]] == j)]
}
}
# Print the matrix
print(mat)
gtask2 <- graph_from_adjacency_matrix(mat, "undirected", weighted = TRUE)
plot(gtask2, edge.label = E(gtask2)$weight)
#install.packages("igraph")
library(igraph)
# Define the adjacency matrix for the graph
adj_mat <- matrix(c(0, 7, 4, 0, 0, 0, 0,
0, 0, 0, 2, 0, 0, 0,
0, 0, 0, 1, 0, 3, 0,
0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 8, 0,
0, 0, 0, 0, 0, 0, 2,
0, 0, 0, 0, 0, 0, 0), nrow = 7, byrow = TRUE)
# Define the vertex labels for the graph
vertex_labels <- c("A", "B", "C", "D", "E", "F", "G")
# Set the row and column names for the matrices
rownames(adj_mat) <- vertex_labels
colnames(adj_mat) <- vertex_labels
g <- graph_from_adjacency_matrix(adj_mat, "undirected", weighted = TRUE)
plot(g, edge.label = E(g)$weight)
g[]
#g_mst <- mst(g)
#plot(g_mst, edge.label = E(g)$weight)
ad_new <- as_adjacency_matrix(g, attr="weight")
ad_new <- as.matrix(ad_new)
ad_new
degrees <- rowSums(ad_new != 0)
degrees
odds <- which(degrees %% 2 == 1)
odds
adj_mat[odds, odds]
subgraph <- graph_from_adjacency_matrix(adj_mat[odds, odds], "undirected", weighted = TRUE)
plot(subgraph, edge.label = E(subgraph)$weight)
E(subgraph)$type = c(1,0,1)
E(subgraph)$color[E(subgraph)$type == 1] <- "red"
E(subgraph)$color[E(subgraph)$type == 0] <- "gray"
plot(subgraph, edge.width = 6,edge.label = E(subgraph)$weight)
task <- graph( edges=c("G","F", "F","C", "C","A", "A","B", "B","D", "D","C", "C","D", "D","E", "E","F", "F","G"), directed=F )
plot(task)
a <- make_graph( ~ A-B-C-A )
plot(a)
eulerian_cycle(a)
task <- graph( edges=c("G","F", "F","C", "C","A", "A","B", "B","D", "D","C", "C","D", "D","E", "E","F", "F","G"), directed=F )
plot(task)
eulerian_cycle(task)
